// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2023 15:09:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          test1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] commodity;
reg ok;
reg [5:0] reset;
reg reset1;
reg rmb1;
reg rmb5;
reg rmb10;
reg s;
// wires                                               
wire [6:0] segments0;
wire [6:0] segments1;
wire [6:0] segments2;
wire [6:0] segments3;
wire [6:0] segments4;
wire [6:0] segments5;

// assign statements (if any)                          
test1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.commodity(commodity),
	.ok(ok),
	.reset(reset),
	.reset1(reset1),
	.rmb1(rmb1),
	.rmb5(rmb5),
	.rmb10(rmb10),
	.s(s),
	.segments0(segments0),
	.segments1(segments1),
	.segments2(segments2),
	.segments3(segments3),
	.segments4(segments4),
	.segments5(segments5)
);
initial 
begin 
#1000000 $finish;
end 

// rmb1
initial
begin
	rmb1 = 1'b0;
	rmb1 = #50000 1'b1;
	rmb1 = #90000 1'b0;
end 

// rmb5
initial
begin
	rmb5 = 1'b0;
end 

// rmb10
initial
begin
	rmb10 = 1'b0;
end 
endmodule

